{"ast":null,"code":"\"use strict\";\n\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport useLatestCallback from 'use-latest-callback';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst FrameContext = React.createContext(undefined);\nexport function useFrameSize(selector, debounce) {\n  const context = React.useContext(FrameContext);\n  if (context == null) {\n    throw new Error('useFrameSize must be used within a FrameSizeProvider');\n  }\n  const value = React.useSyncExternalStore(debounce ? context.subscribeDebounced : context.subscribe, () => selector(context.getCurrent()), () => selector(context.getCurrent()));\n  return value;\n}\nexport function FrameSizeProvider({\n  children\n}) {\n  const context = React.useContext(FrameContext);\n  if (context != null) {\n    return children;\n  }\n  return _jsx(FrameSizeProviderInner, {\n    children: children\n  });\n}\nfunction FrameSizeProviderInner({\n  children\n}) {\n  const listeners = React.useRef(new Set());\n  const {\n    element,\n    get\n  } = useResizeListener(size => {\n    listeners.current.forEach(listener => listener(size));\n  });\n  const getCurrent = useLatestCallback(get);\n  const subscribe = useLatestCallback(listener => {\n    listeners.current.add(listener);\n    return () => {\n      listeners.current.delete(listener);\n    };\n  });\n  const subscribeDebounced = useLatestCallback(listener => {\n    let timer;\n    const debouncedListener = size => {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        listener(size);\n      }, 100);\n    };\n    listeners.current.add(debouncedListener);\n    return () => {\n      clearTimeout(timer);\n      listeners.current.delete(debouncedListener);\n    };\n  });\n  const context = React.useMemo(() => ({\n    getCurrent,\n    subscribe,\n    subscribeDebounced\n  }), [subscribe, subscribeDebounced, getCurrent]);\n  return _jsxs(FrameContext.Provider, {\n    value: context,\n    children: [element, children]\n  });\n}\nconst useResizeListener = Platform.OS === 'web' ? useResizeListenerWeb : useResizeListenerNative;\nfunction useResizeListenerNative(onChange) {\n  const frame = useSafeAreaFrame();\n  React.useLayoutEffect(() => {\n    onChange(frame);\n  }, [frame, onChange]);\n  return {\n    element: null,\n    get: () => frame\n  };\n}\nconst {\n  width = 0,\n  height = 0\n} = Dimensions.get('window');\nfunction useResizeListenerWeb(onChange) {\n  const frameRef = React.useRef({\n    width,\n    height\n  });\n  const elementRef = React.useRef(null);\n  React.useEffect(() => {\n    if (elementRef.current == null) {\n      return;\n    }\n    const update = size => {\n      if (frameRef.current.width === size.width && frameRef.current.height === size.height) {\n        return;\n      }\n      frameRef.current = size;\n      onChange(size);\n    };\n    const rect = elementRef.current.getBoundingClientRect();\n    update({\n      width: rect.width,\n      height: rect.height\n    });\n    const observer = new ResizeObserver(entries => {\n      const entry = entries[0];\n      if (entry) {\n        const {\n          width,\n          height\n        } = entry.contentRect;\n        update({\n          width,\n          height\n        });\n      }\n    });\n    observer.observe(elementRef.current);\n    return () => {\n      observer.disconnect();\n    };\n  }, [onChange]);\n  const element = _jsx(\"div\", {\n    ref: elementRef,\n    style: Object.assign({}, StyleSheet.absoluteFillObject, {\n      pointerEvents: 'none',\n      visibility: 'hidden'\n    })\n  });\n  return {\n    element,\n    get: () => frameRef.current\n  };\n}","map":{"version":3,"names":["React","Dimensions","Platform","StyleSheet","useSafeAreaFrame","useLatestCallback","jsx","_jsx","jsxs","_jsxs","FrameContext","createContext","undefined","useFrameSize","selector","debounce","context","useContext","Error","value","useSyncExternalStore","subscribeDebounced","subscribe","getCurrent","FrameSizeProvider","children","FrameSizeProviderInner","listeners","useRef","Set","element","get","useResizeListener","size","current","forEach","listener","add","delete","timer","debouncedListener","clearTimeout","setTimeout","useMemo","Provider","OS","useResizeListenerWeb","useResizeListenerNative","onChange","frame","useLayoutEffect","width","height","frameRef","elementRef","useEffect","update","rect","getBoundingClientRect","observer","ResizeObserver","entries","entry","contentRect","observe","disconnect","ref","style","Object","assign","absoluteFillObject","pointerEvents","visibility"],"sources":["/Users/sonamdorjighalley/Desktop/SS2025_SWE201_PINTEREST/node_modules/@react-navigation/elements/src/useFrameSize.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Dimensions, Platform, StyleSheet } from 'react-native';\n// eslint-disable-next-line no-restricted-imports\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport useLatestCallback from 'use-latest-callback';\n\ntype Size = {\n  width: number;\n  height: number;\n};\n\ntype Listener = (size: Size) => void;\n\ntype RemoveListener = () => void;\n\ntype FrameContextType = {\n  getCurrent: () => Size;\n  subscribe: (listener: Listener, debounce?: boolean) => RemoveListener;\n  subscribeDebounced: (listener: Listener) => RemoveListener;\n};\n\nconst FrameContext = React.createContext<FrameContextType | undefined>(\n  undefined\n);\n\nexport function useFrameSize<T>(\n  selector: (size: Size) => T,\n  debounce?: boolean\n): T {\n  const context = React.useContext(FrameContext);\n\n  if (context == null) {\n    throw new Error('useFrameSize must be used within a FrameSizeProvider');\n  }\n\n  const value = React.useSyncExternalStore(\n    debounce ? context.subscribeDebounced : context.subscribe,\n    () => selector(context.getCurrent()),\n    () => selector(context.getCurrent())\n  );\n\n  return value;\n}\n\nexport function FrameSizeProvider({ children }: { children: React.ReactNode }) {\n  const context = React.useContext(FrameContext);\n\n  if (context != null) {\n    // If the context is already present, don't wrap again\n    return children;\n  }\n\n  return <FrameSizeProviderInner>{children}</FrameSizeProviderInner>;\n}\n\nfunction FrameSizeProviderInner({\n  children,\n}: {\n  children: React.ReactNode;\n}): React.JSX.Element {\n  const listeners = React.useRef<Set<Listener>>(new Set());\n\n  const { element, get } = useResizeListener((size) => {\n    listeners.current.forEach((listener) => listener(size));\n  });\n\n  const getCurrent = useLatestCallback(get);\n\n  const subscribe = useLatestCallback((listener: Listener): RemoveListener => {\n    listeners.current.add(listener);\n\n    return () => {\n      listeners.current.delete(listener);\n    };\n  });\n\n  const subscribeDebounced = useLatestCallback(\n    (listener: Listener): RemoveListener => {\n      let timer: ReturnType<typeof setTimeout>;\n\n      const debouncedListener = (size: Size) => {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          listener(size);\n        }, 100);\n      };\n\n      listeners.current.add(debouncedListener);\n\n      return () => {\n        clearTimeout(timer);\n        listeners.current.delete(debouncedListener);\n      };\n    }\n  );\n\n  const context = React.useMemo<FrameContextType>(\n    () => ({\n      getCurrent,\n      subscribe,\n      subscribeDebounced,\n    }),\n    [subscribe, subscribeDebounced, getCurrent]\n  );\n\n  return (\n    <FrameContext.Provider value={context}>\n      {element}\n      {children}\n    </FrameContext.Provider>\n  );\n}\n\nconst useResizeListener =\n  Platform.OS === 'web' ? useResizeListenerWeb : useResizeListenerNative;\n\nfunction useResizeListenerNative(onChange: (size: Size) => void) {\n  const frame = useSafeAreaFrame();\n\n  React.useLayoutEffect(() => {\n    onChange(frame);\n  }, [frame, onChange]);\n\n  return {\n    element: null,\n    get: () => frame,\n  };\n}\n\nconst { width = 0, height = 0 } = Dimensions.get('window');\n\n// FIXME: On the Web, the safe area frame value doesn't update on resize\n// So we workaround this by measuring the frame on resize\nfunction useResizeListenerWeb(onChange: (size: Size) => void) {\n  const frameRef = React.useRef<Size>({\n    width,\n    height,\n  });\n\n  const elementRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    if (elementRef.current == null) {\n      return;\n    }\n\n    const update = (size: Size) => {\n      if (\n        frameRef.current.width === size.width &&\n        frameRef.current.height === size.height\n      ) {\n        return;\n      }\n\n      frameRef.current = size;\n      onChange(size);\n    };\n\n    const rect = elementRef.current.getBoundingClientRect();\n\n    update({\n      width: rect.width,\n      height: rect.height,\n    });\n\n    const observer = new ResizeObserver((entries) => {\n      const entry = entries[0];\n\n      if (entry) {\n        const { width, height } = entry.contentRect;\n\n        update({ width, height });\n      }\n    });\n\n    observer.observe(elementRef.current);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [onChange]);\n\n  const element = (\n    <div\n      ref={elementRef}\n      style={{\n        ...StyleSheet.absoluteFillObject,\n        pointerEvents: 'none',\n        visibility: 'hidden',\n      }}\n    />\n  );\n\n  return {\n    element,\n    get: () => frameRef.current,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}